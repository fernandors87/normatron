h1. Normatron

Normatron is an Ruby On Rails plugin that perform attribute normalizations for ActiveRecord objects.
With it you can normalize attributes to the desired format before saving them in the database.
This gem inhibits the work of having to override attributes or create a specific method to perform most of the normalizations.

h2. Installation

Let the bundler install the gem by adding the following into your application gemfile:

pre. gem 'normatron'

And then bundle it up:

pre. $ bundle install

Or install it by yourself:

pre. $ gem install normatron

h2. The problem

Suppose you have a product model as the following:

pre. # ./db/migrate/20120101010000_create_products.rb
class CreateProducts < ActiveRecord::Migration
  def change
    create_table :products do |t|
      t.string  :name
      t.decimal :price, :precision => 10, :scale => 2
    end
  end
end

pre. # ./app/models/products.rb
class Product < ActiveRecord::Base
  attr_accessible :name, :price
end

And we want the _name_ attribute be uppercased before saving it into the database.
The most usual approach to do this includes:

* Override the _name_ setter and convert the value to an uppercased string.
* Use the "_before_validation_":http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html callback to run a method or block doing the task.

Both ways are ilenegant, boring, error prone and very expensive.
What led me to make this gem and offer a third way to solve this issue:

h2. Usage

Normatron uses "_:squish_":http://rubydoc.info/gems/normatron/Normatron/Filters#squish-class_method and "_:blank_":http://rubydoc.info/gems/normatron/Normatron/Filters#blank-class_method as default filters.
These filters are applied to all attributes in @normalize@ function, since no options is given.

pre. # ./app/models/products.rb
class Product < ActiveRecord::Base
  attr_accessible :name, :price
  normalize :name
end

pre.  $ rails console
 > p1 = Product.create name: "  memory   card    "
=> #<Product id: nil, name: "memory card", price: nil>
 > p2 = Product.create name: "    "
=> #<Product id: nil, name: nil, price: nil>

h3. The _normalize_attributes_ method

Methods like "create":http://api.rubyonrails.org/classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create, "valid?":http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#method-i-valid-3F or "save":http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#method-i-valid-3F always call the _normalize_attributes_ method, thought "before_validation":http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html callback.
This is the method that invokes all filters to their attributes. So you can perform the normalizations without necessarily having to perform the model validations.

pre.  $ rails console
 > p = Product.new name: "  hard    drive"
=> #<Product id: nil, name: "  hard    drive", price: nil>
 > p.normalize_attributes
 > p
=> #<Product id: nil, name: "hard drive", price: nil>

h3. The _normalize_options_ method

To read the normalization filters set for a model, just call the @normalize_options@ method.

pre.  $ rails console
 > Product.normalize_options
=> { name: { :squish => [], :blank => [] } }

This method returns a Hash, where the keys are the attribute names and values are another Hash with filter options.
In the filter options Hash, keys represent the filter names and the values are Arrays containing arguments to be passed to filter methods.
The following example is a data structure returned by the @normalize_options@ method:

pre.  $ rails console
 > MyModel.normalize_options
=> { :attribute_a => { :filter_a => [] },
     :attribute_b => { :filter_a => [],
                       :filter_b => [arg_a, arg_b] },
     :attribute_c => { :filter_b => [arg_a, arg_b],
                       :filter_c => [arg],
                       :filter_d => [] },
     :attribute_d => { :filter_a => [],
                       :filter_c => [arg],
                       :filter_d => [arg_a, arg_b, arg_c, arg_d] } }

h3. The _:with_ option

The @:with@ option allows to bind filters to one or more attribute.

pre. class Product < ActiveRecord::Base
  normalize :name, :with => :upcase
end

pre.  $ rails console
 > Product.normalize_options
=> { :name => { :upcase => [] } }

The filters passed throught @:with@ option will not stack with default filters.
When @normalize@ method is used multiple times for the same attribute, it will stack the filter bindings.

pre. class Product < ActiveRecord::Base
  normalize :name
  normalize :name, :with => :upcase
end

pre.  $ rails console
 > Product.normalize_options
=> { :name => { :squish => [],
                :blank  => [],
                :upcase => [] } }

The same result can be obtained using:

pre. normalize :name, :with => [:squish, :blank, :upcase]

Some filters may use arguments to perferm normalizations.
There are two approaches to deal with filter arguments in Normatron:

a) Using a Hash where the key is the filter name and the value is an arguments Array.

pre. class Product < ActiveRecord::Base
  normalize :name,        :with => [ { :keep => [:Latin], :remove => [:Nd, :Zs] } ]
  normalize :description, :with => :squeeze
  normalize :brand,       :with => [ { :squeeze => ["a-z"] }, { :keep => [:Word] } ]
end

b) Using an Array where the first element if the attribute name and rest is the filter arguments.

pre. class Product < ActiveRecord::Base
  normalize :name,        :with => [ [:keep, :Latin], [:remove, :Nd, :Zs] ]
  normalize :description, :with => :squeeze
  normalize :brand,       :with => [ [:squeeze, "a-z"], [:keep, :Word] ]
end

Both ways will produce the same result:

pre.  $ rails console
 > Product.normalize_options
=> { :name        => { :keep    => [:Latin],
                       :remove  => [:Nd, :Zs] },
     :description => { :squeeze => [] },
     :brand       => { :squeeze => ["a-z"],
                       :keep    => [:Word] } }

h3. Using instance method as filter

Create an instance method returning the value as you want.
The first argument is mandatory, and will receive the original value of the attribute.
If you need to use aditional arguments or varargs, just add them after the first argument.

<pre>
# ./app/models/client.rb
class Client < ActiveRecord::Base
  normalize :phone,  :with => [:custom_a, [:custom_b, :a, :b], {:custom_c => [:a, :b, :c]}]
  normalize :mobile, :with => [:custom_a, {:custom_b => [:a, :b]}, [:custom_c, :a, :b, :c]]

  def custom_a(value)
    # ...
  end

  def custom_b(value, *args)
    # ...
  end

  def custom_c(value, arg_a, arg_b, arg_c)
    # ...
  end
end
</pre>

h2. Filters

Information about native filters and how to use them can be found in "Normatron::Filters(Normatron::Filters Rubydoc)":http://rubydoc.info/gems/normatron/Normatron/Filters. All methods have a short description of what they do and some examples of how to use them.

h1. Contributing

There are several ways to make this gem even better:

* Forking this project
* Adding new features or bug fixes
* Making tests
* Commiting your changes
* Reporting any bug or unexpected behavior
* Suggesting any improvement
* Sharing with your friends, forums, communities, job, etc...
* Helping users with difficulty using this gem
* Paying me a beer =]

h1. Credits

This gem was initially inspired on these gems:
* "normalize_attributes (normalize_attributes Gem)":https://github.com/fnando/normalize_attributes - "fnando (fnando's Github)":https://github.com/fnando 
* "attribute_normalizer (attribute_normalizer Gem)":https://github.com/mdeering/attribute_normalizer - "mdeering (mdeering's Github)":https://github.com/mdeering

h1. License

See file attached to source code or click "here":https://github.com/fernandors87/normatron/blob/master/MIT-LICENSE.